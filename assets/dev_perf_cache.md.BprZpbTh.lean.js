import{_ as a,c as i,a4 as n,o as e}from"./chunks/framework.su6J3y5l.js";const o=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"dev/perf/cache.md","filePath":"dev/perf/cache.md","lastUpdated":1732976097000}'),p={name:"dev/perf/cache.md"};function t(l,s,h,r,k,c){return e(),i("div",null,s[0]||(s[0]=[n(`<h2 id="静态资源加载策略" tabindex="-1">静态资源加载策略 <a class="header-anchor" href="#静态资源加载策略" aria-label="Permalink to &quot;静态资源加载策略&quot;">​</a></h2><h3 id="svg处理" tabindex="-1">SVG处理 <a class="header-anchor" href="#svg处理" aria-label="Permalink to &quot;SVG处理&quot;">​</a></h3><p><a href="https://github.com/vbenjs/vite-plugin-svg-icons" target="_blank" rel="noreferrer">vite-plugin-svg-icons</a></p><p>实现机制</p><p>在构建时扫描指定目录的SVG文件</p><p>将SVG转换为sprites 生成一个虚拟模块 在运行时可直接使用这些SVG</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> domInject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">inject</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DomInject</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;body-last&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  switch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (inject) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    case</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;body-first&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // position based on child or parent(prepend or append)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;svgDOM.before(body.firstChild)&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;svgDOM.after(body.lastChild)&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>性能优化</p><p>将多个SVG合并为sprite 减少HTTP请求 缓存友好</p><p>开发体验 SVG的自动导入 统一管理</p><p>构建效率</p><p>编译时处理 按需加载 体积优化</p><h2 id="cache" tabindex="-1">cache <a class="header-anchor" href="#cache" aria-label="Permalink to &quot;cache&quot;">​</a></h2><p>Browser Cache <code>max-age=31536000,immutable</code></p><p>File System Cache</p>`,15)]))}const b=a(p,[["render",t]]);export{o as __pageData,b as default};
