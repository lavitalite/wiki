import{_ as e,c as n,j as a,a as r,o as l}from"./chunks/framework.su6J3y5l.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"arch/ddia/partitions.md","filePath":"arch/ddia/partitions.md","lastUpdated":1732976097000}'),i={name:"arch/ddia/partitions.md"};function o(s,t,d,p,c,u){return l(),n("div",null,t[0]||(t[0]=[a("p",null,"我们需要将数据进行 分区（partitions），也称为 分片（sharding）",-1),a("p",null,"分区目标是将数据查询负载均匀分布在各个节点上。如果每个节点公平分享数据和负载，那么理论上 10 个节点应该能够处理 10 倍的数据",-1),a("h2",{id:"请求路由",tabindex:"-1"},[r("请求路由 "),a("a",{class:"header-anchor",href:"#请求路由","aria-label":'Permalink to "请求路由"'},"​")],-1),a("p",null,"但是仍然存在一个悬而未决的问题：当客户想要发出请求时，如何知道要连接哪个节点？",-1),a("ol",null,[a("li",null,"循环策略的负载均衡，即 Round-Robin Load Balancer"),a("li",null,"首先将所有来自客户端的请求发送到路由层，它决定了应该处理请求的节点，并相应地转发"),a("li",null,"要求客户端知道分区和节点的分配。在这种情况下，客户端可以直接连接到适当的节点，而不需要任何中介。")],-1)]))}const f=e(i,[["render",o]]);export{m as __pageData,f as default};
