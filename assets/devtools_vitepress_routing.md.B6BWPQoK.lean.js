import{_ as i,c as a,a4 as t,o as s}from"./chunks/framework.su6J3y5l.js";const h=JSON.parse('{"title":"Routing","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"devtools/vitepress/routing.md","filePath":"devtools/vitepress/routing.md","lastUpdated":1732976097000}'),r={name:"devtools/vitepress/routing.md"};function o(n,e,l,d,p,c){return s(),a("div",null,e[0]||(e[0]=[t(`<h1 id="routing" tabindex="-1">Routing <a class="header-anchor" href="#routing" aria-label="Permalink to &quot;Routing&quot;">​</a></h1><p>vitepress map between visited url and served file</p><h2 id="file-based-routing" tabindex="-1">File_Based Routing <a class="header-anchor" href="#file-based-routing" aria-label="Permalink to &quot;File_Based Routing&quot;">​</a></h2><p>access url to generated HTML pages are mapped from the file strcture of the source markdown files</p><h2 id="fs-resolution-and-url-path-resolution" tabindex="-1">fs resolution and url path resolution <a class="header-anchor" href="#fs-resolution-and-url-path-resolution" aria-label="Permalink to &quot;fs resolution and url path resolution&quot;">​</a></h2><p>base path</p><p>src dir and project root</p><h3 id="source-to-url-mapping" tabindex="-1">source to url mapping <a class="header-anchor" href="#source-to-url-mapping" aria-label="Permalink to &quot;source to url mapping&quot;">​</a></h3><p>The rusulting source-to-url mapping</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>src/index.md --&gt; /index.html(accessible as /)</span></span>
<span class="line"><span>src/guide.md --&gt; /guide.html</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="project-root" tabindex="-1">project root <a class="header-anchor" href="#project-root" aria-label="Permalink to &quot;project root&quot;">​</a></h3><p><code>.vitepress</code>: reserved location for <code>vitepress config file</code>, <code>dev server cache</code>, <code>build output</code>, <code>optional theme customization</code></p><p>Project root is where vitepress will try to look the look for the <code>.vitpress</code></p><p>when you run <code>vitepress dev</code> or <code>vitepress build</code> from the command line, the vitepress will use the current working direcotry(will be treated) as proejct root.</p><p><code>project root</code>: default to <code>process.cwd()</code> or specify sub directory <code>vitepress dev docs</code></p><h2 id="file-reference" tabindex="-1">File reference <a class="header-anchor" href="#file-reference" aria-label="Permalink to &quot;File reference&quot;">​</a></h2><p>you can use both absolute and relative path when linking between page</p><div class="language-md vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">md</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- sibling/peer directory  --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#032F62;--shiki-light-text-decoration:underline;--shiki-dark:#DBEDFF;--shiki-dark-text-decoration:underline;">reference</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">](</span><span style="--shiki-light:#24292E;--shiki-light-text-decoration:underline;--shiki-dark:#E1E4E8;--shiki-dark-text-decoration:underline;">./reference/site-co.md</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- under same/current directory --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[](</span><span style="--shiki-light:#24292E;--shiki-light-text-decoration:underline;--shiki-dark:#E1E4E8;--shiki-dark-text-decoration:underline;">../guide/routing.md</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="linking-to-non-vitepress-page" tabindex="-1">Linking to Non-vitepress page <a class="header-anchor" href="#linking-to-non-vitepress-page" aria-label="Permalink to &quot;Linking to Non-vitepress page&quot;">​</a></h3><div class="tip custom-block"><p class="custom-block-title">Note</p><p>Alternatively, you can directly use the anchor tag syntax:</p><div class="language-md vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">md</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;a href=&quot;/pure.html&quot; target=&quot;_self&quot;&gt;Link to pure.html&lt;/a&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></div><h2 id="cleaner-url" tabindex="-1">cleaner URL <a class="header-anchor" href="#cleaner-url" aria-label="Permalink to &quot;cleaner URL&quot;">​</a></h2><p>::: To serve clean URLs with VitePress, server-side support is required. :::</p><p>hosting platforms (for example Netlify, Vercel, GitHub Pages) provide the ability to map a URL like <code>/foo</code> to <code>/foo.html</code> if it exists, without a redirect:</p><ul><li>Netlify and GitHub Pages support this by default.</li><li>Vercel requires enabling the <a href="https://vercel.com/docs/concepts/projects/project-configuration#cleanurls" target="_blank" rel="noreferrer"><code>cleanUrls</code> option in <code>vercel.json</code></a>.</li></ul><h2 id="route-rewrites" tabindex="-1">Route Rewrites <a class="header-anchor" href="#route-rewrites" aria-label="Permalink to &quot;Route Rewrites&quot;">​</a></h2>`,25)]))}const g=i(r,[["render",o]]);export{h as __pageData,g as default};
