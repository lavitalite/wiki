import{_ as a,c as t,a4 as r,o}from"./chunks/framework.su6J3y5l.js";const s="/tech_insight/assets/why_container_bf.hEmGzF7-.webp",i="/tech_insight/assets/why_container_af.CGVeXtsM.webp",c="/tech_insight/assets/container_vs_vm.mwaqc-tE.webp",n="/tech_insight/assets/docker-architecture.Dvdsdqsw.webp",k=JSON.parse('{"title":"容器技术","description":"","frontmatter":{},"headers":[],"relativePath":"deploy/docker/why-docker.md","filePath":"deploy/docker/why-docker.md","lastUpdated":1732976097000}'),p={name:"deploy/docker/why-docker.md"};function l(h,e,d,m,u,_){return o(),t("div",null,e[0]||(e[0]=[r('<h1 id="容器技术" tabindex="-1">容器技术 <a class="header-anchor" href="#容器技术" aria-label="Permalink to &quot;容器技术&quot;">​</a></h1><div class="info custom-block"><p class="custom-block-title">INFO</p><p>容器（集装箱）是一种技术，Docker是让容器技术普及开来的最成功实现</p></div><hr><h2 id="为什么容器技术会出现" tabindex="-1">为什么容器技术会出现 <a class="header-anchor" href="#为什么容器技术会出现" aria-label="Permalink to &quot;为什么容器技术会出现&quot;">​</a></h2><p>容器技术出现之前</p><p><img src="'+s+'" alt="" width="50%"> 容器技术出现之后 <img src="'+i+'" alt="" width="50%"></p><p>容器vs虚拟机 <img src="'+c+'" alt=""></p><p>Linux Container主要由Namespace 2 和Cgroups 3 两大机制来保证实现</p><p>Namespace命名空间主要用于资源的隔离（诞生于2002年）</p><p>Cgroups(Control Groups)就负责资源管理控制作用，比如进程组使用CPU/MEM的限制，进程组的优先级控制，进程组的挂起和恢复等等。（由Google贡献，2008年合并到了Linux Kernel）</p><h2 id="容器的标准化" tabindex="-1">容器的标准化 <a class="header-anchor" href="#容器的标准化" aria-label="Permalink to &quot;容器的标准化&quot;">​</a></h2><p>在2015年，由Google，Docker、红帽等厂商联合发起了OCI（Open Container Initiative[^2]）组织，致力于容器技术的标准化</p><h3 id="容器运行时标准-runtime-spec" tabindex="-1">容器运行时标准 （runtime spec） <a class="header-anchor" href="#容器运行时标准-runtime-spec" aria-label="Permalink to &quot;容器运行时标准 （runtime spec）&quot;">​</a></h3><p>简单来讲就是规定了容器的基本操作规范，比如如何下载镜像，创建容器，启动容器等。 容器镜像标准（image spec） 主要定义镜像的基本格式。</p><h2 id="架构" tabindex="-1">架构 <a class="header-anchor" href="#架构" aria-label="Permalink to &quot;架构&quot;">​</a></h2><p><img src="'+n+'" alt=""></p><h2 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to &quot;参考资料&quot;">​</a></h2><p>[^1]: cgroup is a Linux kernel feature that limits, accounts for, and isolates the resource usage (CPU, memory, disk I/O, etc) of a collection of processes</p><p>[^2]: <a href="https://opencontainers.org/" target="_blank" rel="noreferrer">open container</a></p>',19)]))}const b=a(p,[["render",l]]);export{k as __pageData,b as default};
